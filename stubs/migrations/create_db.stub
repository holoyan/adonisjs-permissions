{{{
  exports({
    to: app.makePath('database', 'migrations', prefix + '_create_role_permissions_table.ts')
  })
}}}
import { BaseSchema } from '@adonisjs/lucid/schema'
import config from "@adonisjs/core/services/config";
import { Knex } from 'knex'

export default class extends BaseSchema {

  protected modelId(table: Knex.CreateTableBuilder) {
    if (config.get('permissions.permissionsConfig.tables.uuid')) {
      table.uuid('model_id')
    } else {
      table.bigint('model_id').unsigned()
    }
  }

  async up() {
    this.schema.createTable(config.get('permissions.permissionsConfig.tables.permissions'), (table) => {
      table.bigIncrements('id')

      table.string('slug')
      table.string('title').nullable()
      table.string('entity_type').defaultTo('*')
      table.bigint('entity_id').unsigned().nullable()
      table.integer('scope').unsigned().defaultTo(0)
      table.boolean('allowed').defaultTo(true)

      /**
       * Uses timestamptz for PostgreSQL and DATETIME2 for MSSQL
       */
      table.timestamp('created_at', { useTz: true })
      table.timestamp('updated_at', { useTz: true })

      table.index(['slug', 'scope'])
      table.index(['entity_type', 'entity_id'])
    })

    this.schema.createTable(config.get('permissions.permissionsConfig.tables.roles'), (table) => {
      table.bigIncrements('id')

      table.string('slug')
      table.string('title').nullable()
      table.string('entity_type').defaultTo('*')
      table.bigint('entity_id').unsigned().nullable()
      table.integer('scope').unsigned().defaultTo(0)
      table.boolean('allowed').defaultTo(true)

      /**
       * Uses timestamptz for PostgreSQL and DATETIME2 for MSSQL
       */
      table.timestamp('created_at', { useTz: true })
      table.timestamp('updated_at', { useTz: true })

      table.index(['slug', 'scope'])
      table.index(['entity_type', 'entity_id'])
    })

    this.schema.createTable(config.get('permissions.permissionsConfig.tables.modelRoles'), (table) => {
      table.bigIncrements('id')

      table.string('model_type')
      this.modelId(table)
      table.bigInteger('role_id').unsigned()

      /**
       * Uses timestamptz for PostgreSQL and DATETIME2 for MSSQL
       */
      table.timestamp('created_at', { useTz: true })
      table.timestamp('updated_at', { useTz: true })

      table.index(['model_type', 'model_id'])

      table.foreign('role_id').references('roles.id').onDelete('CASCADE')
    })

    this.schema.createTable(config.get('permissions.permissionsConfig.tables.modelPermissions'), (table) => {
      table.bigIncrements('id')

      table.string('model_type')
      this.modelId(table)
      table.bigInteger('permission_id').unsigned()

      /**
       * Uses timestamptz for PostgreSQL and DATETIME2 for MSSQL
       */
      table.timestamp('created_at', { useTz: true })
      table.timestamp('updated_at', { useTz: true })

      table.index(['model_type', 'model_id'])

      table.foreign('permission_id').references('permissions.id').onDelete('CASCADE')
    })

  }

  async down() {
    this.schema.dropTable(config.get('permissions.permissionsConfig.tables.modelRoles'))
    this.schema.dropTable(config.get('permissions.permissionsConfig.tables.roles'))
    this.schema.dropTable(config.get('permissions.permissionsConfig.tables.modelPermissions'))
    this.schema.dropTable(config.get('permissions.permissionsConfig.tables.permissions'))
  }
}
